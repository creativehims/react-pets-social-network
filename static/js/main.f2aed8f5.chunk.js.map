{"version":3,"sources":["util/dataFetcher.js","components/UserList/Userlist.js","components/Profile/Profile.js","components/Directory/Directory.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["FAKE_USER_DATA","cat","name","bio","profilePictureUrl","friends","dog","komodo","timeoutByFetchId","Map","Fetch","Object","defineProperty","this","value","Date","now","Math","random","toString","substr","Userlist","props","handleClick","event","onChoose","target","dataset","username","usernames","map","data-username","onClick","Profile","useState","userData","setUserData","useEffect","callback","hasOwnProperty","Error","fetch","delay","floor","timeout","setTimeout","delete","_id","set","fetchUserData","isLoading","className","src","alt","Directory","App","body","currentUsername","setCurrrentUsername","handleChoose","newUsername","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2aed8f5.chunk.js","sourcesContent":["// This module exports fake data fetching functionality.\n// In a real app, this would grab data from the internet, but\n// this module just waits a little bit before responding.\n//\n// You don't need to look at this, but you can if you want!\n\nexport const FAKE_USER_DATA = {\n  cat: {\n    name: 'Kitty Cat',\n    bio: \"I'm the coolest cat around. I'm the cat's meow!\",\n    profilePictureUrl:\n      'https://content.codecademy.com/courses/React/react_lifecycle_cat_profile_picture.jpg',\n    friends: ['komodo'],\n  },\n  dog: {\n    name: 'Doggy Dog',\n    bio: \"I'm the doggity dog! Woof woof!\",\n    profilePictureUrl:\n      'https://content.codecademy.com/courses/React/react_lifecycle_dog_profile_picture.jpg',\n    friends: ['komodo'],\n  },\n  komodo: {\n    name: 'Lizard Lady',\n    bio: \"I'm a Komodo dragon. You'll love me.\",\n    profilePictureUrl:\n      'https://content.codecademy.com/courses/React/react_lifecycle_komodo_profile_picture.jpg',\n    friends: ['cat', 'dog'],\n  },\n};\n\nconst timeoutByFetchId = new Map();\n\nclass Fetch {\n  constructor() {\n    Object.defineProperty(this, '_id', {\n      value: Date.now() + Math.random().toString().substr(2),\n    });\n  }\n}\n\nexport function fetchUserData(username, callback) {\n  if (!FAKE_USER_DATA.hasOwnProperty(username)) {\n    throw new Error(\n      'Invalid username. Make sure it is \"cat\", \"dog\", or \"komodo\".'\n    );\n  }\n\n  const fetch = new Fetch();\n\n  const delay = Math.floor(Math.random() * 1000) + 500;\n  const timeout = setTimeout(() => {\n    timeoutByFetchId.delete(fetch._id);\n    callback(FAKE_USER_DATA[username]);\n  }, delay);\n\n  timeoutByFetchId.set(fetch._id, timeout);\n\n  return fetch;\n}\n\nexport function cancelFetch(fetch) {\n  if (!fetch || typeof fetch !== 'object') {\n    return;\n  }\n  const timeout = timeoutByFetchId.get(fetch._id);\n  clearTimeout(timeout);\n  timeoutByFetchId.delete(fetch._id);\n}\n","import React from 'react';\n\nexport const Userlist = (props) => {\n  const handleClick = (event) => {\n    props.onChoose(event.target.dataset.username);\n  };\n\n  return (\n    <ul>\n      {props.usernames?.map((username) => (\n        <li key={username}>\n          <button data-username={username} onClick={handleClick}>\n            @{username}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchUserData } from '../../util/dataFetcher';\nimport { Userlist } from '../UserList/Userlist';\n\nexport const Profile = (props) => {\n  const { username, onChoose } = props;\n\n  const [userData, setUserData] = useState(null);\n\n  const loadUserData = () => {\n    if (username) {\n      setUserData(null);\n      fetchUserData(username, (userData) => {\n        setUserData(userData);\n      });\n    }\n  };\n\n  useEffect(loadUserData, [username]);\n\n  const isLoading = userData === null;\n  const name = isLoading === true ? 'Loading...' : userData.name;\n  const bio = isLoading === true ? 'Loading...' : userData.bio;\n  const friends = isLoading === true ? [] : userData.friends;\n\n  let className = 'Profile';\n  if (isLoading) {\n    className += ' loading';\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"profile-picture\">\n        <img src={!isLoading ? userData.profilePictureUrl : ''} alt=\"\" />\n      </div>\n      <div className=\"profile-body\">\n        <h2>{name}</h2>\n        <h3>@{username != null && username}</h3>\n        <p>{bio}</p>\n        <h3>My friends</h3>\n        <Userlist usernames={friends} onChoose={onChoose} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Userlist } from '../UserList/Userlist';\n\nexport const Directory = (props) => {\n  return (\n    <div className=\"Directory\">\n      <h2>User directory</h2>\n      <Userlist\n        usernames={['dog', 'cat', 'komodo']}\n        onChoose={props.onChoose}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Profile } from '../Profile/Profile';\nimport { Directory } from '../Directory/Directory';\nimport '../../styles.css';\n\nconst App = () => {\n  const [currentUsername, setCurrrentUsername] = useState(null);\n\n  const handleChoose = (newUsername) => {\n    setCurrrentUsername(newUsername);\n  };\n\n  const handleReturnToDirectoryClick = () => {\n    setCurrrentUsername(null);\n  };\n\n  let body;\n  if (currentUsername) {\n    body = <Profile username={currentUsername} onChoose={handleChoose} />;\n  } else {\n    body = <Directory onChoose={handleChoose} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>PetBook</h1>\n\n        <nav>\n          {currentUsername && (\n            <button onClick={handleReturnToDirectoryClick}>\n              Return to directory\n            </button>\n          )}\n        </nav>\n      </header>\n\n      <main>{body}</main>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}